// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1 "github.com/solid-wang/covid/pkg/apis/app/v1"
	batchv1 "github.com/solid-wang/covid/pkg/apis/batch/v1"
	corev1 "github.com/solid-wang/covid/pkg/apis/core/v1"
	servicev1 "github.com/solid-wang/covid/pkg/apis/service/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=app, Version=v1
	case v1.SchemeGroupVersion.WithResource("applications"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.App().V1().Applications().Informer()}, nil
	case v1.SchemeGroupVersion.WithResource("products"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.App().V1().Products().Informer()}, nil

		// Group=batch, Version=v1
	case batchv1.SchemeGroupVersion.WithResource("continuousdeployments"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Batch().V1().ContinuousDeployments().Informer()}, nil
	case batchv1.SchemeGroupVersion.WithResource("continuousintegrations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Batch().V1().ContinuousIntegrations().Informer()}, nil

		// Group=core, Version=v1
	case corev1.SchemeGroupVersion.WithResource("events"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Core().V1().Events().Informer()}, nil

		// Group=service, Version=v1
	case servicev1.SchemeGroupVersion.WithResource("dockerrepositories"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Service().V1().DockerRepositories().Informer()}, nil
	case servicev1.SchemeGroupVersion.WithResource("gitlabs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Service().V1().Gitlabs().Informer()}, nil
	case servicev1.SchemeGroupVersion.WithResource("kuberneteses"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Service().V1().Kuberneteses().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
