// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	"context"
	time "time"

	examplev1 "github.com/solid-wang/covid/pkg/apis/example/v1"
	versioned "github.com/solid-wang/covid/pkg/generated/clientset/versioned"
	internalinterfaces "github.com/solid-wang/covid/pkg/generated/informers/externalversions/internalinterfaces"
	v1 "github.com/solid-wang/covid/pkg/generated/listers/example/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// Demo1Informer provides access to a shared informer and lister for
// Demo1s.
type Demo1Informer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.Demo1Lister
}

type demo1Informer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewDemo1Informer constructs a new informer for Demo1 type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewDemo1Informer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredDemo1Informer(client, resyncPeriod, indexers, nil)
}

// NewFilteredDemo1Informer constructs a new informer for Demo1 type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredDemo1Informer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ExampleV1().Demo1s().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ExampleV1().Demo1s().Watch(context.TODO(), options)
			},
		},
		&examplev1.Demo1{},
		resyncPeriod,
		indexers,
	)
}

func (f *demo1Informer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredDemo1Informer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *demo1Informer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&examplev1.Demo1{}, f.defaultInformer)
}

func (f *demo1Informer) Lister() v1.Demo1Lister {
	return v1.NewDemo1Lister(f.Informer().GetIndexer())
}
