// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	appv1 "github.com/solid-wang/covid/pkg/apis/app/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeProducts implements ProductInterface
type FakeProducts struct {
	Fake *FakeAppV1
}

var productsResource = schema.GroupVersionResource{Group: "app", Version: "v1", Resource: "products"}

var productsKind = schema.GroupVersionKind{Group: "app", Version: "v1", Kind: "Product"}

// Get takes name of the product, and returns the corresponding product object, and an error if there is any.
func (c *FakeProducts) Get(ctx context.Context, name string, options v1.GetOptions) (result *appv1.Product, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(productsResource, name), &appv1.Product{})
	if obj == nil {
		return nil, err
	}
	return obj.(*appv1.Product), err
}

// List takes label and field selectors, and returns the list of Products that match those selectors.
func (c *FakeProducts) List(ctx context.Context, opts v1.ListOptions) (result *appv1.ProductList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(productsResource, productsKind, opts), &appv1.ProductList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &appv1.ProductList{ListMeta: obj.(*appv1.ProductList).ListMeta}
	for _, item := range obj.(*appv1.ProductList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested products.
func (c *FakeProducts) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(productsResource, opts))
}

// Create takes the representation of a product and creates it.  Returns the server's representation of the product, and an error, if there is any.
func (c *FakeProducts) Create(ctx context.Context, product *appv1.Product, opts v1.CreateOptions) (result *appv1.Product, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(productsResource, product), &appv1.Product{})
	if obj == nil {
		return nil, err
	}
	return obj.(*appv1.Product), err
}

// Update takes the representation of a product and updates it. Returns the server's representation of the product, and an error, if there is any.
func (c *FakeProducts) Update(ctx context.Context, product *appv1.Product, opts v1.UpdateOptions) (result *appv1.Product, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(productsResource, product), &appv1.Product{})
	if obj == nil {
		return nil, err
	}
	return obj.(*appv1.Product), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeProducts) UpdateStatus(ctx context.Context, product *appv1.Product, opts v1.UpdateOptions) (*appv1.Product, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(productsResource, "status", product), &appv1.Product{})
	if obj == nil {
		return nil, err
	}
	return obj.(*appv1.Product), err
}

// Delete takes name of the product and deletes it. Returns an error if one occurs.
func (c *FakeProducts) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(productsResource, name, opts), &appv1.Product{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeProducts) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(productsResource, listOpts)

	_, err := c.Fake.Invokes(action, &appv1.ProductList{})
	return err
}

// Patch applies the patch and returns the patched product.
func (c *FakeProducts) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *appv1.Product, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(productsResource, name, pt, data, subresources...), &appv1.Product{})
	if obj == nil {
		return nil, err
	}
	return obj.(*appv1.Product), err
}
