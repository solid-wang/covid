// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/solid-wang/covid/pkg/apis/batch/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ContinuousIntegrationLister helps list ContinuousIntegrations.
// All objects returned here must be treated as read-only.
type ContinuousIntegrationLister interface {
	// List lists all ContinuousIntegrations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ContinuousIntegration, err error)
	// ContinuousIntegrations returns an object that can list and get ContinuousIntegrations.
	ContinuousIntegrations(namespace string) ContinuousIntegrationNamespaceLister
	ContinuousIntegrationListerExpansion
}

// continuousIntegrationLister implements the ContinuousIntegrationLister interface.
type continuousIntegrationLister struct {
	indexer cache.Indexer
}

// NewContinuousIntegrationLister returns a new ContinuousIntegrationLister.
func NewContinuousIntegrationLister(indexer cache.Indexer) ContinuousIntegrationLister {
	return &continuousIntegrationLister{indexer: indexer}
}

// List lists all ContinuousIntegrations in the indexer.
func (s *continuousIntegrationLister) List(selector labels.Selector) (ret []*v1.ContinuousIntegration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ContinuousIntegration))
	})
	return ret, err
}

// ContinuousIntegrations returns an object that can list and get ContinuousIntegrations.
func (s *continuousIntegrationLister) ContinuousIntegrations(namespace string) ContinuousIntegrationNamespaceLister {
	return continuousIntegrationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ContinuousIntegrationNamespaceLister helps list and get ContinuousIntegrations.
// All objects returned here must be treated as read-only.
type ContinuousIntegrationNamespaceLister interface {
	// List lists all ContinuousIntegrations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ContinuousIntegration, err error)
	// Get retrieves the ContinuousIntegration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ContinuousIntegration, error)
	ContinuousIntegrationNamespaceListerExpansion
}

// continuousIntegrationNamespaceLister implements the ContinuousIntegrationNamespaceLister
// interface.
type continuousIntegrationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ContinuousIntegrations in the indexer for a given namespace.
func (s continuousIntegrationNamespaceLister) List(selector labels.Selector) (ret []*v1.ContinuousIntegration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ContinuousIntegration))
	})
	return ret, err
}

// Get retrieves the ContinuousIntegration from the indexer for a given namespace and name.
func (s continuousIntegrationNamespaceLister) Get(name string) (*v1.ContinuousIntegration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("continuousintegration"), name)
	}
	return obj.(*v1.ContinuousIntegration), nil
}
