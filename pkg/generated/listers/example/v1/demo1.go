// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/solid-wang/covid/pkg/apis/example/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Demo1Lister helps list Demo1s.
// All objects returned here must be treated as read-only.
type Demo1Lister interface {
	// List lists all Demo1s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Demo1, err error)
	// Demo1s returns an object that can list and get Demo1s.
	Demo1s(namespace string) Demo1NamespaceLister
	Demo1ListerExpansion
}

// demo1Lister implements the Demo1Lister interface.
type demo1Lister struct {
	indexer cache.Indexer
}

// NewDemo1Lister returns a new Demo1Lister.
func NewDemo1Lister(indexer cache.Indexer) Demo1Lister {
	return &demo1Lister{indexer: indexer}
}

// List lists all Demo1s in the indexer.
func (s *demo1Lister) List(selector labels.Selector) (ret []*v1.Demo1, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Demo1))
	})
	return ret, err
}

// Demo1s returns an object that can list and get Demo1s.
func (s *demo1Lister) Demo1s(namespace string) Demo1NamespaceLister {
	return demo1NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Demo1NamespaceLister helps list and get Demo1s.
// All objects returned here must be treated as read-only.
type Demo1NamespaceLister interface {
	// List lists all Demo1s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Demo1, err error)
	// Get retrieves the Demo1 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Demo1, error)
	Demo1NamespaceListerExpansion
}

// demo1NamespaceLister implements the Demo1NamespaceLister
// interface.
type demo1NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Demo1s in the indexer for a given namespace.
func (s demo1NamespaceLister) List(selector labels.Selector) (ret []*v1.Demo1, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Demo1))
	})
	return ret, err
}

// Get retrieves the Demo1 from the indexer for a given namespace and name.
func (s demo1NamespaceLister) Get(name string) (*v1.Demo1, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("demo1"), name)
	}
	return obj.(*v1.Demo1), nil
}
