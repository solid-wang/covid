// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/solid-wang/covid/pkg/apis/group/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DemoLister helps list Demos.
// All objects returned here must be treated as read-only.
type DemoLister interface {
	// List lists all Demos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Demo, err error)
	// Demos returns an object that can list and get Demos.
	Demos(namespace string) DemoNamespaceLister
	DemoListerExpansion
}

// demoLister implements the DemoLister interface.
type demoLister struct {
	indexer cache.Indexer
}

// NewDemoLister returns a new DemoLister.
func NewDemoLister(indexer cache.Indexer) DemoLister {
	return &demoLister{indexer: indexer}
}

// List lists all Demos in the indexer.
func (s *demoLister) List(selector labels.Selector) (ret []*v1.Demo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Demo))
	})
	return ret, err
}

// Demos returns an object that can list and get Demos.
func (s *demoLister) Demos(namespace string) DemoNamespaceLister {
	return demoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DemoNamespaceLister helps list and get Demos.
// All objects returned here must be treated as read-only.
type DemoNamespaceLister interface {
	// List lists all Demos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Demo, err error)
	// Get retrieves the Demo from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Demo, error)
	DemoNamespaceListerExpansion
}

// demoNamespaceLister implements the DemoNamespaceLister
// interface.
type demoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Demos in the indexer for a given namespace.
func (s demoNamespaceLister) List(selector labels.Selector) (ret []*v1.Demo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Demo))
	})
	return ret, err
}

// Get retrieves the Demo from the indexer for a given namespace and name.
func (s demoNamespaceLister) Get(name string) (*v1.Demo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("demo"), name)
	}
	return obj.(*v1.Demo), nil
}
