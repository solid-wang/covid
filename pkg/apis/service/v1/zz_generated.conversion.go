//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	unsafe "unsafe"

	service "github.com/solid-wang/covid/pkg/apis/service"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*DockerRepository)(nil), (*service.DockerRepository)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DockerRepository_To_service_DockerRepository(a.(*DockerRepository), b.(*service.DockerRepository), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.DockerRepository)(nil), (*DockerRepository)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_DockerRepository_To_v1_DockerRepository(a.(*service.DockerRepository), b.(*DockerRepository), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*DockerRepositoryList)(nil), (*service.DockerRepositoryList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DockerRepositoryList_To_service_DockerRepositoryList(a.(*DockerRepositoryList), b.(*service.DockerRepositoryList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.DockerRepositoryList)(nil), (*DockerRepositoryList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_DockerRepositoryList_To_v1_DockerRepositoryList(a.(*service.DockerRepositoryList), b.(*DockerRepositoryList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*DockerRepositorySpec)(nil), (*service.DockerRepositorySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DockerRepositorySpec_To_service_DockerRepositorySpec(a.(*DockerRepositorySpec), b.(*service.DockerRepositorySpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.DockerRepositorySpec)(nil), (*DockerRepositorySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_DockerRepositorySpec_To_v1_DockerRepositorySpec(a.(*service.DockerRepositorySpec), b.(*DockerRepositorySpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*DockerRepositoryStatus)(nil), (*service.DockerRepositoryStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DockerRepositoryStatus_To_service_DockerRepositoryStatus(a.(*DockerRepositoryStatus), b.(*service.DockerRepositoryStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.DockerRepositoryStatus)(nil), (*DockerRepositoryStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_DockerRepositoryStatus_To_v1_DockerRepositoryStatus(a.(*service.DockerRepositoryStatus), b.(*DockerRepositoryStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Gitlab)(nil), (*service.Gitlab)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Gitlab_To_service_Gitlab(a.(*Gitlab), b.(*service.Gitlab), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.Gitlab)(nil), (*Gitlab)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_Gitlab_To_v1_Gitlab(a.(*service.Gitlab), b.(*Gitlab), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GitlabList)(nil), (*service.GitlabList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_GitlabList_To_service_GitlabList(a.(*GitlabList), b.(*service.GitlabList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.GitlabList)(nil), (*GitlabList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_GitlabList_To_v1_GitlabList(a.(*service.GitlabList), b.(*GitlabList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GitlabSpec)(nil), (*service.GitlabSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_GitlabSpec_To_service_GitlabSpec(a.(*GitlabSpec), b.(*service.GitlabSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.GitlabSpec)(nil), (*GitlabSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_GitlabSpec_To_v1_GitlabSpec(a.(*service.GitlabSpec), b.(*GitlabSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*GitlabStatus)(nil), (*service.GitlabStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_GitlabStatus_To_service_GitlabStatus(a.(*GitlabStatus), b.(*service.GitlabStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.GitlabStatus)(nil), (*GitlabStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_GitlabStatus_To_v1_GitlabStatus(a.(*service.GitlabStatus), b.(*GitlabStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Kubernetes)(nil), (*service.Kubernetes)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Kubernetes_To_service_Kubernetes(a.(*Kubernetes), b.(*service.Kubernetes), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.Kubernetes)(nil), (*Kubernetes)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_Kubernetes_To_v1_Kubernetes(a.(*service.Kubernetes), b.(*Kubernetes), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubernetesList)(nil), (*service.KubernetesList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_KubernetesList_To_service_KubernetesList(a.(*KubernetesList), b.(*service.KubernetesList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.KubernetesList)(nil), (*KubernetesList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_KubernetesList_To_v1_KubernetesList(a.(*service.KubernetesList), b.(*KubernetesList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubernetesSpec)(nil), (*service.KubernetesSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_KubernetesSpec_To_service_KubernetesSpec(a.(*KubernetesSpec), b.(*service.KubernetesSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.KubernetesSpec)(nil), (*KubernetesSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_KubernetesSpec_To_v1_KubernetesSpec(a.(*service.KubernetesSpec), b.(*KubernetesSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubernetesStatus)(nil), (*service.KubernetesStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_KubernetesStatus_To_service_KubernetesStatus(a.(*KubernetesStatus), b.(*service.KubernetesStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.KubernetesStatus)(nil), (*KubernetesStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_KubernetesStatus_To_v1_KubernetesStatus(a.(*service.KubernetesStatus), b.(*KubernetesStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Project)(nil), (*service.Project)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Project_To_service_Project(a.(*Project), b.(*service.Project), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*service.Project)(nil), (*Project)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_service_Project_To_v1_Project(a.(*service.Project), b.(*Project), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_DockerRepository_To_service_DockerRepository(in *DockerRepository, out *service.DockerRepository, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_DockerRepositorySpec_To_service_DockerRepositorySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_DockerRepositoryStatus_To_service_DockerRepositoryStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_DockerRepository_To_service_DockerRepository is an autogenerated conversion function.
func Convert_v1_DockerRepository_To_service_DockerRepository(in *DockerRepository, out *service.DockerRepository, s conversion.Scope) error {
	return autoConvert_v1_DockerRepository_To_service_DockerRepository(in, out, s)
}

func autoConvert_service_DockerRepository_To_v1_DockerRepository(in *service.DockerRepository, out *DockerRepository, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_service_DockerRepositorySpec_To_v1_DockerRepositorySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_service_DockerRepositoryStatus_To_v1_DockerRepositoryStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_service_DockerRepository_To_v1_DockerRepository is an autogenerated conversion function.
func Convert_service_DockerRepository_To_v1_DockerRepository(in *service.DockerRepository, out *DockerRepository, s conversion.Scope) error {
	return autoConvert_service_DockerRepository_To_v1_DockerRepository(in, out, s)
}

func autoConvert_v1_DockerRepositoryList_To_service_DockerRepositoryList(in *DockerRepositoryList, out *service.DockerRepositoryList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]service.DockerRepository)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_DockerRepositoryList_To_service_DockerRepositoryList is an autogenerated conversion function.
func Convert_v1_DockerRepositoryList_To_service_DockerRepositoryList(in *DockerRepositoryList, out *service.DockerRepositoryList, s conversion.Scope) error {
	return autoConvert_v1_DockerRepositoryList_To_service_DockerRepositoryList(in, out, s)
}

func autoConvert_service_DockerRepositoryList_To_v1_DockerRepositoryList(in *service.DockerRepositoryList, out *DockerRepositoryList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]DockerRepository)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_service_DockerRepositoryList_To_v1_DockerRepositoryList is an autogenerated conversion function.
func Convert_service_DockerRepositoryList_To_v1_DockerRepositoryList(in *service.DockerRepositoryList, out *DockerRepositoryList, s conversion.Scope) error {
	return autoConvert_service_DockerRepositoryList_To_v1_DockerRepositoryList(in, out, s)
}

func autoConvert_v1_DockerRepositorySpec_To_service_DockerRepositorySpec(in *DockerRepositorySpec, out *service.DockerRepositorySpec, s conversion.Scope) error {
	out.Host = in.Host
	out.User = in.User
	out.Password = in.Password
	return nil
}

// Convert_v1_DockerRepositorySpec_To_service_DockerRepositorySpec is an autogenerated conversion function.
func Convert_v1_DockerRepositorySpec_To_service_DockerRepositorySpec(in *DockerRepositorySpec, out *service.DockerRepositorySpec, s conversion.Scope) error {
	return autoConvert_v1_DockerRepositorySpec_To_service_DockerRepositorySpec(in, out, s)
}

func autoConvert_service_DockerRepositorySpec_To_v1_DockerRepositorySpec(in *service.DockerRepositorySpec, out *DockerRepositorySpec, s conversion.Scope) error {
	out.Host = in.Host
	out.User = in.User
	out.Password = in.Password
	return nil
}

// Convert_service_DockerRepositorySpec_To_v1_DockerRepositorySpec is an autogenerated conversion function.
func Convert_service_DockerRepositorySpec_To_v1_DockerRepositorySpec(in *service.DockerRepositorySpec, out *DockerRepositorySpec, s conversion.Scope) error {
	return autoConvert_service_DockerRepositorySpec_To_v1_DockerRepositorySpec(in, out, s)
}

func autoConvert_v1_DockerRepositoryStatus_To_service_DockerRepositoryStatus(in *DockerRepositoryStatus, out *service.DockerRepositoryStatus, s conversion.Scope) error {
	return nil
}

// Convert_v1_DockerRepositoryStatus_To_service_DockerRepositoryStatus is an autogenerated conversion function.
func Convert_v1_DockerRepositoryStatus_To_service_DockerRepositoryStatus(in *DockerRepositoryStatus, out *service.DockerRepositoryStatus, s conversion.Scope) error {
	return autoConvert_v1_DockerRepositoryStatus_To_service_DockerRepositoryStatus(in, out, s)
}

func autoConvert_service_DockerRepositoryStatus_To_v1_DockerRepositoryStatus(in *service.DockerRepositoryStatus, out *DockerRepositoryStatus, s conversion.Scope) error {
	return nil
}

// Convert_service_DockerRepositoryStatus_To_v1_DockerRepositoryStatus is an autogenerated conversion function.
func Convert_service_DockerRepositoryStatus_To_v1_DockerRepositoryStatus(in *service.DockerRepositoryStatus, out *DockerRepositoryStatus, s conversion.Scope) error {
	return autoConvert_service_DockerRepositoryStatus_To_v1_DockerRepositoryStatus(in, out, s)
}

func autoConvert_v1_Gitlab_To_service_Gitlab(in *Gitlab, out *service.Gitlab, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_GitlabSpec_To_service_GitlabSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_GitlabStatus_To_service_GitlabStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_Gitlab_To_service_Gitlab is an autogenerated conversion function.
func Convert_v1_Gitlab_To_service_Gitlab(in *Gitlab, out *service.Gitlab, s conversion.Scope) error {
	return autoConvert_v1_Gitlab_To_service_Gitlab(in, out, s)
}

func autoConvert_service_Gitlab_To_v1_Gitlab(in *service.Gitlab, out *Gitlab, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_service_GitlabSpec_To_v1_GitlabSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_service_GitlabStatus_To_v1_GitlabStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_service_Gitlab_To_v1_Gitlab is an autogenerated conversion function.
func Convert_service_Gitlab_To_v1_Gitlab(in *service.Gitlab, out *Gitlab, s conversion.Scope) error {
	return autoConvert_service_Gitlab_To_v1_Gitlab(in, out, s)
}

func autoConvert_v1_GitlabList_To_service_GitlabList(in *GitlabList, out *service.GitlabList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]service.Gitlab)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_GitlabList_To_service_GitlabList is an autogenerated conversion function.
func Convert_v1_GitlabList_To_service_GitlabList(in *GitlabList, out *service.GitlabList, s conversion.Scope) error {
	return autoConvert_v1_GitlabList_To_service_GitlabList(in, out, s)
}

func autoConvert_service_GitlabList_To_v1_GitlabList(in *service.GitlabList, out *GitlabList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Gitlab)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_service_GitlabList_To_v1_GitlabList is an autogenerated conversion function.
func Convert_service_GitlabList_To_v1_GitlabList(in *service.GitlabList, out *GitlabList, s conversion.Scope) error {
	return autoConvert_service_GitlabList_To_v1_GitlabList(in, out, s)
}

func autoConvert_v1_GitlabSpec_To_service_GitlabSpec(in *GitlabSpec, out *service.GitlabSpec, s conversion.Scope) error {
	out.Host = in.Host
	out.Token = in.Token
	out.ProjectIndex = *(*map[string]service.Project)(unsafe.Pointer(&in.ProjectIndex))
	return nil
}

// Convert_v1_GitlabSpec_To_service_GitlabSpec is an autogenerated conversion function.
func Convert_v1_GitlabSpec_To_service_GitlabSpec(in *GitlabSpec, out *service.GitlabSpec, s conversion.Scope) error {
	return autoConvert_v1_GitlabSpec_To_service_GitlabSpec(in, out, s)
}

func autoConvert_service_GitlabSpec_To_v1_GitlabSpec(in *service.GitlabSpec, out *GitlabSpec, s conversion.Scope) error {
	out.Host = in.Host
	out.Token = in.Token
	out.ProjectIndex = *(*map[string]Project)(unsafe.Pointer(&in.ProjectIndex))
	return nil
}

// Convert_service_GitlabSpec_To_v1_GitlabSpec is an autogenerated conversion function.
func Convert_service_GitlabSpec_To_v1_GitlabSpec(in *service.GitlabSpec, out *GitlabSpec, s conversion.Scope) error {
	return autoConvert_service_GitlabSpec_To_v1_GitlabSpec(in, out, s)
}

func autoConvert_v1_GitlabStatus_To_service_GitlabStatus(in *GitlabStatus, out *service.GitlabStatus, s conversion.Scope) error {
	return nil
}

// Convert_v1_GitlabStatus_To_service_GitlabStatus is an autogenerated conversion function.
func Convert_v1_GitlabStatus_To_service_GitlabStatus(in *GitlabStatus, out *service.GitlabStatus, s conversion.Scope) error {
	return autoConvert_v1_GitlabStatus_To_service_GitlabStatus(in, out, s)
}

func autoConvert_service_GitlabStatus_To_v1_GitlabStatus(in *service.GitlabStatus, out *GitlabStatus, s conversion.Scope) error {
	return nil
}

// Convert_service_GitlabStatus_To_v1_GitlabStatus is an autogenerated conversion function.
func Convert_service_GitlabStatus_To_v1_GitlabStatus(in *service.GitlabStatus, out *GitlabStatus, s conversion.Scope) error {
	return autoConvert_service_GitlabStatus_To_v1_GitlabStatus(in, out, s)
}

func autoConvert_v1_Kubernetes_To_service_Kubernetes(in *Kubernetes, out *service.Kubernetes, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_KubernetesSpec_To_service_KubernetesSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_KubernetesStatus_To_service_KubernetesStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_Kubernetes_To_service_Kubernetes is an autogenerated conversion function.
func Convert_v1_Kubernetes_To_service_Kubernetes(in *Kubernetes, out *service.Kubernetes, s conversion.Scope) error {
	return autoConvert_v1_Kubernetes_To_service_Kubernetes(in, out, s)
}

func autoConvert_service_Kubernetes_To_v1_Kubernetes(in *service.Kubernetes, out *Kubernetes, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_service_KubernetesSpec_To_v1_KubernetesSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_service_KubernetesStatus_To_v1_KubernetesStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_service_Kubernetes_To_v1_Kubernetes is an autogenerated conversion function.
func Convert_service_Kubernetes_To_v1_Kubernetes(in *service.Kubernetes, out *Kubernetes, s conversion.Scope) error {
	return autoConvert_service_Kubernetes_To_v1_Kubernetes(in, out, s)
}

func autoConvert_v1_KubernetesList_To_service_KubernetesList(in *KubernetesList, out *service.KubernetesList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]service.Kubernetes)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_KubernetesList_To_service_KubernetesList is an autogenerated conversion function.
func Convert_v1_KubernetesList_To_service_KubernetesList(in *KubernetesList, out *service.KubernetesList, s conversion.Scope) error {
	return autoConvert_v1_KubernetesList_To_service_KubernetesList(in, out, s)
}

func autoConvert_service_KubernetesList_To_v1_KubernetesList(in *service.KubernetesList, out *KubernetesList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Kubernetes)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_service_KubernetesList_To_v1_KubernetesList is an autogenerated conversion function.
func Convert_service_KubernetesList_To_v1_KubernetesList(in *service.KubernetesList, out *KubernetesList, s conversion.Scope) error {
	return autoConvert_service_KubernetesList_To_v1_KubernetesList(in, out, s)
}

func autoConvert_v1_KubernetesSpec_To_service_KubernetesSpec(in *KubernetesSpec, out *service.KubernetesSpec, s conversion.Scope) error {
	out.Name = in.Name
	out.Config = in.Config
	return nil
}

// Convert_v1_KubernetesSpec_To_service_KubernetesSpec is an autogenerated conversion function.
func Convert_v1_KubernetesSpec_To_service_KubernetesSpec(in *KubernetesSpec, out *service.KubernetesSpec, s conversion.Scope) error {
	return autoConvert_v1_KubernetesSpec_To_service_KubernetesSpec(in, out, s)
}

func autoConvert_service_KubernetesSpec_To_v1_KubernetesSpec(in *service.KubernetesSpec, out *KubernetesSpec, s conversion.Scope) error {
	out.Name = in.Name
	out.Config = in.Config
	return nil
}

// Convert_service_KubernetesSpec_To_v1_KubernetesSpec is an autogenerated conversion function.
func Convert_service_KubernetesSpec_To_v1_KubernetesSpec(in *service.KubernetesSpec, out *KubernetesSpec, s conversion.Scope) error {
	return autoConvert_service_KubernetesSpec_To_v1_KubernetesSpec(in, out, s)
}

func autoConvert_v1_KubernetesStatus_To_service_KubernetesStatus(in *KubernetesStatus, out *service.KubernetesStatus, s conversion.Scope) error {
	return nil
}

// Convert_v1_KubernetesStatus_To_service_KubernetesStatus is an autogenerated conversion function.
func Convert_v1_KubernetesStatus_To_service_KubernetesStatus(in *KubernetesStatus, out *service.KubernetesStatus, s conversion.Scope) error {
	return autoConvert_v1_KubernetesStatus_To_service_KubernetesStatus(in, out, s)
}

func autoConvert_service_KubernetesStatus_To_v1_KubernetesStatus(in *service.KubernetesStatus, out *KubernetesStatus, s conversion.Scope) error {
	return nil
}

// Convert_service_KubernetesStatus_To_v1_KubernetesStatus is an autogenerated conversion function.
func Convert_service_KubernetesStatus_To_v1_KubernetesStatus(in *service.KubernetesStatus, out *KubernetesStatus, s conversion.Scope) error {
	return autoConvert_service_KubernetesStatus_To_v1_KubernetesStatus(in, out, s)
}

func autoConvert_v1_Project_To_service_Project(in *Project, out *service.Project, s conversion.Scope) error {
	out.ApplicationProductMap = *(*service.ApplicationProductMap)(unsafe.Pointer(&in.ApplicationProductMap))
	out.HooksMap = *(*map[service.GitlabWebhookEventType]*int)(unsafe.Pointer(&in.HooksMap))
	return nil
}

// Convert_v1_Project_To_service_Project is an autogenerated conversion function.
func Convert_v1_Project_To_service_Project(in *Project, out *service.Project, s conversion.Scope) error {
	return autoConvert_v1_Project_To_service_Project(in, out, s)
}

func autoConvert_service_Project_To_v1_Project(in *service.Project, out *Project, s conversion.Scope) error {
	out.ApplicationProductMap = *(*ApplicationProductMap)(unsafe.Pointer(&in.ApplicationProductMap))
	out.HooksMap = *(*map[GitlabWebhookEventType]*int)(unsafe.Pointer(&in.HooksMap))
	return nil
}

// Convert_service_Project_To_v1_Project is an autogenerated conversion function.
func Convert_service_Project_To_v1_Project(in *service.Project, out *Project, s conversion.Scope) error {
	return autoConvert_service_Project_To_v1_Project(in, out, s)
}
