//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	unsafe "unsafe"

	batch "github.com/solid-wang/covid/pkg/apis/batch"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*ConfigMap)(nil), (*batch.ConfigMap)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ConfigMap_To_batch_ConfigMap(a.(*ConfigMap), b.(*batch.ConfigMap), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ConfigMap)(nil), (*ConfigMap)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ConfigMap_To_v1_ConfigMap(a.(*batch.ConfigMap), b.(*ConfigMap), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ContinuousDeployment)(nil), (*batch.ContinuousDeployment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ContinuousDeployment_To_batch_ContinuousDeployment(a.(*ContinuousDeployment), b.(*batch.ContinuousDeployment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ContinuousDeployment)(nil), (*ContinuousDeployment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ContinuousDeployment_To_v1_ContinuousDeployment(a.(*batch.ContinuousDeployment), b.(*ContinuousDeployment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ContinuousDeploymentList)(nil), (*batch.ContinuousDeploymentList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ContinuousDeploymentList_To_batch_ContinuousDeploymentList(a.(*ContinuousDeploymentList), b.(*batch.ContinuousDeploymentList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ContinuousDeploymentList)(nil), (*ContinuousDeploymentList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ContinuousDeploymentList_To_v1_ContinuousDeploymentList(a.(*batch.ContinuousDeploymentList), b.(*ContinuousDeploymentList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ContinuousDeploymentSpec)(nil), (*batch.ContinuousDeploymentSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ContinuousDeploymentSpec_To_batch_ContinuousDeploymentSpec(a.(*ContinuousDeploymentSpec), b.(*batch.ContinuousDeploymentSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ContinuousDeploymentSpec)(nil), (*ContinuousDeploymentSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ContinuousDeploymentSpec_To_v1_ContinuousDeploymentSpec(a.(*batch.ContinuousDeploymentSpec), b.(*ContinuousDeploymentSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ContinuousDeploymentStatus)(nil), (*batch.ContinuousDeploymentStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ContinuousDeploymentStatus_To_batch_ContinuousDeploymentStatus(a.(*ContinuousDeploymentStatus), b.(*batch.ContinuousDeploymentStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ContinuousDeploymentStatus)(nil), (*ContinuousDeploymentStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ContinuousDeploymentStatus_To_v1_ContinuousDeploymentStatus(a.(*batch.ContinuousDeploymentStatus), b.(*ContinuousDeploymentStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ContinuousIntegration)(nil), (*batch.ContinuousIntegration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ContinuousIntegration_To_batch_ContinuousIntegration(a.(*ContinuousIntegration), b.(*batch.ContinuousIntegration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ContinuousIntegration)(nil), (*ContinuousIntegration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ContinuousIntegration_To_v1_ContinuousIntegration(a.(*batch.ContinuousIntegration), b.(*ContinuousIntegration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ContinuousIntegrationList)(nil), (*batch.ContinuousIntegrationList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ContinuousIntegrationList_To_batch_ContinuousIntegrationList(a.(*ContinuousIntegrationList), b.(*batch.ContinuousIntegrationList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ContinuousIntegrationList)(nil), (*ContinuousIntegrationList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ContinuousIntegrationList_To_v1_ContinuousIntegrationList(a.(*batch.ContinuousIntegrationList), b.(*ContinuousIntegrationList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ContinuousIntegrationSpec)(nil), (*batch.ContinuousIntegrationSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ContinuousIntegrationSpec_To_batch_ContinuousIntegrationSpec(a.(*ContinuousIntegrationSpec), b.(*batch.ContinuousIntegrationSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ContinuousIntegrationSpec)(nil), (*ContinuousIntegrationSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ContinuousIntegrationSpec_To_v1_ContinuousIntegrationSpec(a.(*batch.ContinuousIntegrationSpec), b.(*ContinuousIntegrationSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ContinuousIntegrationStatus)(nil), (*batch.ContinuousIntegrationStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ContinuousIntegrationStatus_To_batch_ContinuousIntegrationStatus(a.(*ContinuousIntegrationStatus), b.(*batch.ContinuousIntegrationStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ContinuousIntegrationStatus)(nil), (*ContinuousIntegrationStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ContinuousIntegrationStatus_To_v1_ContinuousIntegrationStatus(a.(*batch.ContinuousIntegrationStatus), b.(*ContinuousIntegrationStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Deployment)(nil), (*batch.Deployment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Deployment_To_batch_Deployment(a.(*Deployment), b.(*batch.Deployment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.Deployment)(nil), (*Deployment)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_Deployment_To_v1_Deployment(a.(*batch.Deployment), b.(*Deployment), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*DeploymentPort)(nil), (*batch.DeploymentPort)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_DeploymentPort_To_batch_DeploymentPort(a.(*DeploymentPort), b.(*batch.DeploymentPort), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.DeploymentPort)(nil), (*DeploymentPort)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_DeploymentPort_To_v1_DeploymentPort(a.(*batch.DeploymentPort), b.(*DeploymentPort), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Service)(nil), (*batch.Service)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Service_To_batch_Service(a.(*Service), b.(*batch.Service), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.Service)(nil), (*Service)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_Service_To_v1_Service(a.(*batch.Service), b.(*Service), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ServicePort)(nil), (*batch.ServicePort)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ServicePort_To_batch_ServicePort(a.(*ServicePort), b.(*batch.ServicePort), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.ServicePort)(nil), (*ServicePort)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_ServicePort_To_v1_ServicePort(a.(*batch.ServicePort), b.(*ServicePort), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*Variable)(nil), (*batch.Variable)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_Variable_To_batch_Variable(a.(*Variable), b.(*batch.Variable), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*batch.Variable)(nil), (*Variable)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_batch_Variable_To_v1_Variable(a.(*batch.Variable), b.(*Variable), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_ConfigMap_To_batch_ConfigMap(in *ConfigMap, out *batch.ConfigMap, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	out.Labels = *(*map[string]string)(unsafe.Pointer(&in.Labels))
	out.Data = *(*map[string]string)(unsafe.Pointer(&in.Data))
	return nil
}

// Convert_v1_ConfigMap_To_batch_ConfigMap is an autogenerated conversion function.
func Convert_v1_ConfigMap_To_batch_ConfigMap(in *ConfigMap, out *batch.ConfigMap, s conversion.Scope) error {
	return autoConvert_v1_ConfigMap_To_batch_ConfigMap(in, out, s)
}

func autoConvert_batch_ConfigMap_To_v1_ConfigMap(in *batch.ConfigMap, out *ConfigMap, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	out.Labels = *(*map[string]string)(unsafe.Pointer(&in.Labels))
	out.Data = *(*map[string]string)(unsafe.Pointer(&in.Data))
	return nil
}

// Convert_batch_ConfigMap_To_v1_ConfigMap is an autogenerated conversion function.
func Convert_batch_ConfigMap_To_v1_ConfigMap(in *batch.ConfigMap, out *ConfigMap, s conversion.Scope) error {
	return autoConvert_batch_ConfigMap_To_v1_ConfigMap(in, out, s)
}

func autoConvert_v1_ContinuousDeployment_To_batch_ContinuousDeployment(in *ContinuousDeployment, out *batch.ContinuousDeployment, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_ContinuousDeploymentSpec_To_batch_ContinuousDeploymentSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_ContinuousDeploymentStatus_To_batch_ContinuousDeploymentStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_ContinuousDeployment_To_batch_ContinuousDeployment is an autogenerated conversion function.
func Convert_v1_ContinuousDeployment_To_batch_ContinuousDeployment(in *ContinuousDeployment, out *batch.ContinuousDeployment, s conversion.Scope) error {
	return autoConvert_v1_ContinuousDeployment_To_batch_ContinuousDeployment(in, out, s)
}

func autoConvert_batch_ContinuousDeployment_To_v1_ContinuousDeployment(in *batch.ContinuousDeployment, out *ContinuousDeployment, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_batch_ContinuousDeploymentSpec_To_v1_ContinuousDeploymentSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_batch_ContinuousDeploymentStatus_To_v1_ContinuousDeploymentStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_batch_ContinuousDeployment_To_v1_ContinuousDeployment is an autogenerated conversion function.
func Convert_batch_ContinuousDeployment_To_v1_ContinuousDeployment(in *batch.ContinuousDeployment, out *ContinuousDeployment, s conversion.Scope) error {
	return autoConvert_batch_ContinuousDeployment_To_v1_ContinuousDeployment(in, out, s)
}

func autoConvert_v1_ContinuousDeploymentList_To_batch_ContinuousDeploymentList(in *ContinuousDeploymentList, out *batch.ContinuousDeploymentList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]batch.ContinuousDeployment)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_ContinuousDeploymentList_To_batch_ContinuousDeploymentList is an autogenerated conversion function.
func Convert_v1_ContinuousDeploymentList_To_batch_ContinuousDeploymentList(in *ContinuousDeploymentList, out *batch.ContinuousDeploymentList, s conversion.Scope) error {
	return autoConvert_v1_ContinuousDeploymentList_To_batch_ContinuousDeploymentList(in, out, s)
}

func autoConvert_batch_ContinuousDeploymentList_To_v1_ContinuousDeploymentList(in *batch.ContinuousDeploymentList, out *ContinuousDeploymentList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]ContinuousDeployment)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_batch_ContinuousDeploymentList_To_v1_ContinuousDeploymentList is an autogenerated conversion function.
func Convert_batch_ContinuousDeploymentList_To_v1_ContinuousDeploymentList(in *batch.ContinuousDeploymentList, out *ContinuousDeploymentList, s conversion.Scope) error {
	return autoConvert_batch_ContinuousDeploymentList_To_v1_ContinuousDeploymentList(in, out, s)
}

func autoConvert_v1_ContinuousDeploymentSpec_To_batch_ContinuousDeploymentSpec(in *ContinuousDeploymentSpec, out *batch.ContinuousDeploymentSpec, s conversion.Scope) error {
	out.Env = in.Env
	out.KubernetesConfig = *(*[]byte)(unsafe.Pointer(&in.KubernetesConfig))
	if err := Convert_v1_Deployment_To_batch_Deployment(&in.Deployment, &out.Deployment, s); err != nil {
		return err
	}
	if err := Convert_v1_Service_To_batch_Service(&in.Service, &out.Service, s); err != nil {
		return err
	}
	if err := Convert_v1_ConfigMap_To_batch_ConfigMap(&in.ConfigMap, &out.ConfigMap, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_ContinuousDeploymentSpec_To_batch_ContinuousDeploymentSpec is an autogenerated conversion function.
func Convert_v1_ContinuousDeploymentSpec_To_batch_ContinuousDeploymentSpec(in *ContinuousDeploymentSpec, out *batch.ContinuousDeploymentSpec, s conversion.Scope) error {
	return autoConvert_v1_ContinuousDeploymentSpec_To_batch_ContinuousDeploymentSpec(in, out, s)
}

func autoConvert_batch_ContinuousDeploymentSpec_To_v1_ContinuousDeploymentSpec(in *batch.ContinuousDeploymentSpec, out *ContinuousDeploymentSpec, s conversion.Scope) error {
	out.Env = in.Env
	out.KubernetesConfig = *(*[]byte)(unsafe.Pointer(&in.KubernetesConfig))
	if err := Convert_batch_Deployment_To_v1_Deployment(&in.Deployment, &out.Deployment, s); err != nil {
		return err
	}
	if err := Convert_batch_Service_To_v1_Service(&in.Service, &out.Service, s); err != nil {
		return err
	}
	if err := Convert_batch_ConfigMap_To_v1_ConfigMap(&in.ConfigMap, &out.ConfigMap, s); err != nil {
		return err
	}
	return nil
}

// Convert_batch_ContinuousDeploymentSpec_To_v1_ContinuousDeploymentSpec is an autogenerated conversion function.
func Convert_batch_ContinuousDeploymentSpec_To_v1_ContinuousDeploymentSpec(in *batch.ContinuousDeploymentSpec, out *ContinuousDeploymentSpec, s conversion.Scope) error {
	return autoConvert_batch_ContinuousDeploymentSpec_To_v1_ContinuousDeploymentSpec(in, out, s)
}

func autoConvert_v1_ContinuousDeploymentStatus_To_batch_ContinuousDeploymentStatus(in *ContinuousDeploymentStatus, out *batch.ContinuousDeploymentStatus, s conversion.Scope) error {
	out.Phase = batch.DevOpsStatus(in.Phase)
	return nil
}

// Convert_v1_ContinuousDeploymentStatus_To_batch_ContinuousDeploymentStatus is an autogenerated conversion function.
func Convert_v1_ContinuousDeploymentStatus_To_batch_ContinuousDeploymentStatus(in *ContinuousDeploymentStatus, out *batch.ContinuousDeploymentStatus, s conversion.Scope) error {
	return autoConvert_v1_ContinuousDeploymentStatus_To_batch_ContinuousDeploymentStatus(in, out, s)
}

func autoConvert_batch_ContinuousDeploymentStatus_To_v1_ContinuousDeploymentStatus(in *batch.ContinuousDeploymentStatus, out *ContinuousDeploymentStatus, s conversion.Scope) error {
	out.Phase = DevOpsStatus(in.Phase)
	return nil
}

// Convert_batch_ContinuousDeploymentStatus_To_v1_ContinuousDeploymentStatus is an autogenerated conversion function.
func Convert_batch_ContinuousDeploymentStatus_To_v1_ContinuousDeploymentStatus(in *batch.ContinuousDeploymentStatus, out *ContinuousDeploymentStatus, s conversion.Scope) error {
	return autoConvert_batch_ContinuousDeploymentStatus_To_v1_ContinuousDeploymentStatus(in, out, s)
}

func autoConvert_v1_ContinuousIntegration_To_batch_ContinuousIntegration(in *ContinuousIntegration, out *batch.ContinuousIntegration, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1_ContinuousIntegrationSpec_To_batch_ContinuousIntegrationSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1_ContinuousIntegrationStatus_To_batch_ContinuousIntegrationStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_ContinuousIntegration_To_batch_ContinuousIntegration is an autogenerated conversion function.
func Convert_v1_ContinuousIntegration_To_batch_ContinuousIntegration(in *ContinuousIntegration, out *batch.ContinuousIntegration, s conversion.Scope) error {
	return autoConvert_v1_ContinuousIntegration_To_batch_ContinuousIntegration(in, out, s)
}

func autoConvert_batch_ContinuousIntegration_To_v1_ContinuousIntegration(in *batch.ContinuousIntegration, out *ContinuousIntegration, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_batch_ContinuousIntegrationSpec_To_v1_ContinuousIntegrationSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_batch_ContinuousIntegrationStatus_To_v1_ContinuousIntegrationStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_batch_ContinuousIntegration_To_v1_ContinuousIntegration is an autogenerated conversion function.
func Convert_batch_ContinuousIntegration_To_v1_ContinuousIntegration(in *batch.ContinuousIntegration, out *ContinuousIntegration, s conversion.Scope) error {
	return autoConvert_batch_ContinuousIntegration_To_v1_ContinuousIntegration(in, out, s)
}

func autoConvert_v1_ContinuousIntegrationList_To_batch_ContinuousIntegrationList(in *ContinuousIntegrationList, out *batch.ContinuousIntegrationList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]batch.ContinuousIntegration)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1_ContinuousIntegrationList_To_batch_ContinuousIntegrationList is an autogenerated conversion function.
func Convert_v1_ContinuousIntegrationList_To_batch_ContinuousIntegrationList(in *ContinuousIntegrationList, out *batch.ContinuousIntegrationList, s conversion.Scope) error {
	return autoConvert_v1_ContinuousIntegrationList_To_batch_ContinuousIntegrationList(in, out, s)
}

func autoConvert_batch_ContinuousIntegrationList_To_v1_ContinuousIntegrationList(in *batch.ContinuousIntegrationList, out *ContinuousIntegrationList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]ContinuousIntegration)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_batch_ContinuousIntegrationList_To_v1_ContinuousIntegrationList is an autogenerated conversion function.
func Convert_batch_ContinuousIntegrationList_To_v1_ContinuousIntegrationList(in *batch.ContinuousIntegrationList, out *ContinuousIntegrationList, s conversion.Scope) error {
	return autoConvert_batch_ContinuousIntegrationList_To_v1_ContinuousIntegrationList(in, out, s)
}

func autoConvert_v1_ContinuousIntegrationSpec_To_batch_ContinuousIntegrationSpec(in *ContinuousIntegrationSpec, out *batch.ContinuousIntegrationSpec, s conversion.Scope) error {
	out.GitlabHost = in.GitlabHost
	out.GitlabToken = in.GitlabToken
	out.ProjectID = in.ProjectID
	out.Ref = in.Ref
	out.ConfigPath = in.ConfigPath
	out.BuildImage = in.BuildImage
	out.FromImage = in.FromImage
	out.BuildDir = in.BuildDir
	out.BuildCommand = in.BuildCommand
	out.ArtifactPath = in.ArtifactPath
	out.Image = in.Image
	out.Version = in.Version
	out.Registry = in.Registry
	out.RegistryUser = in.RegistryUser
	out.RegistryPassword = in.RegistryPassword
	return nil
}

// Convert_v1_ContinuousIntegrationSpec_To_batch_ContinuousIntegrationSpec is an autogenerated conversion function.
func Convert_v1_ContinuousIntegrationSpec_To_batch_ContinuousIntegrationSpec(in *ContinuousIntegrationSpec, out *batch.ContinuousIntegrationSpec, s conversion.Scope) error {
	return autoConvert_v1_ContinuousIntegrationSpec_To_batch_ContinuousIntegrationSpec(in, out, s)
}

func autoConvert_batch_ContinuousIntegrationSpec_To_v1_ContinuousIntegrationSpec(in *batch.ContinuousIntegrationSpec, out *ContinuousIntegrationSpec, s conversion.Scope) error {
	out.GitlabHost = in.GitlabHost
	out.GitlabToken = in.GitlabToken
	out.ProjectID = in.ProjectID
	out.Ref = in.Ref
	out.ConfigPath = in.ConfigPath
	out.BuildImage = in.BuildImage
	out.FromImage = in.FromImage
	out.BuildDir = in.BuildDir
	out.BuildCommand = in.BuildCommand
	out.ArtifactPath = in.ArtifactPath
	out.Image = in.Image
	out.Version = in.Version
	out.Registry = in.Registry
	out.RegistryUser = in.RegistryUser
	out.RegistryPassword = in.RegistryPassword
	return nil
}

// Convert_batch_ContinuousIntegrationSpec_To_v1_ContinuousIntegrationSpec is an autogenerated conversion function.
func Convert_batch_ContinuousIntegrationSpec_To_v1_ContinuousIntegrationSpec(in *batch.ContinuousIntegrationSpec, out *ContinuousIntegrationSpec, s conversion.Scope) error {
	return autoConvert_batch_ContinuousIntegrationSpec_To_v1_ContinuousIntegrationSpec(in, out, s)
}

func autoConvert_v1_ContinuousIntegrationStatus_To_batch_ContinuousIntegrationStatus(in *ContinuousIntegrationStatus, out *batch.ContinuousIntegrationStatus, s conversion.Scope) error {
	out.Phase = batch.DevOpsStatus(in.Phase)
	out.ContinuousDeploymentTrigger = (*string)(unsafe.Pointer(in.ContinuousDeploymentTrigger))
	return nil
}

// Convert_v1_ContinuousIntegrationStatus_To_batch_ContinuousIntegrationStatus is an autogenerated conversion function.
func Convert_v1_ContinuousIntegrationStatus_To_batch_ContinuousIntegrationStatus(in *ContinuousIntegrationStatus, out *batch.ContinuousIntegrationStatus, s conversion.Scope) error {
	return autoConvert_v1_ContinuousIntegrationStatus_To_batch_ContinuousIntegrationStatus(in, out, s)
}

func autoConvert_batch_ContinuousIntegrationStatus_To_v1_ContinuousIntegrationStatus(in *batch.ContinuousIntegrationStatus, out *ContinuousIntegrationStatus, s conversion.Scope) error {
	out.Phase = DevOpsStatus(in.Phase)
	out.ContinuousDeploymentTrigger = (*string)(unsafe.Pointer(in.ContinuousDeploymentTrigger))
	return nil
}

// Convert_batch_ContinuousIntegrationStatus_To_v1_ContinuousIntegrationStatus is an autogenerated conversion function.
func Convert_batch_ContinuousIntegrationStatus_To_v1_ContinuousIntegrationStatus(in *batch.ContinuousIntegrationStatus, out *ContinuousIntegrationStatus, s conversion.Scope) error {
	return autoConvert_batch_ContinuousIntegrationStatus_To_v1_ContinuousIntegrationStatus(in, out, s)
}

func autoConvert_v1_Deployment_To_batch_Deployment(in *Deployment, out *batch.Deployment, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	out.Labels = *(*map[string]string)(unsafe.Pointer(&in.Labels))
	out.Replicas = in.Replicas
	out.Image = in.Image
	out.Command = *(*[]string)(unsafe.Pointer(&in.Command))
	out.Ports = *(*[]batch.DeploymentPort)(unsafe.Pointer(&in.Ports))
	out.Variables = *(*[]batch.Variable)(unsafe.Pointer(&in.Variables))
	out.ConfigMapName = (*string)(unsafe.Pointer(in.ConfigMapName))
	out.ConfigMountPath = (*string)(unsafe.Pointer(in.ConfigMountPath))
	return nil
}

// Convert_v1_Deployment_To_batch_Deployment is an autogenerated conversion function.
func Convert_v1_Deployment_To_batch_Deployment(in *Deployment, out *batch.Deployment, s conversion.Scope) error {
	return autoConvert_v1_Deployment_To_batch_Deployment(in, out, s)
}

func autoConvert_batch_Deployment_To_v1_Deployment(in *batch.Deployment, out *Deployment, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	out.Labels = *(*map[string]string)(unsafe.Pointer(&in.Labels))
	out.Replicas = in.Replicas
	out.Image = in.Image
	out.Command = *(*[]string)(unsafe.Pointer(&in.Command))
	out.Ports = *(*[]DeploymentPort)(unsafe.Pointer(&in.Ports))
	out.Variables = *(*[]Variable)(unsafe.Pointer(&in.Variables))
	out.ConfigMapName = (*string)(unsafe.Pointer(in.ConfigMapName))
	out.ConfigMountPath = (*string)(unsafe.Pointer(in.ConfigMountPath))
	return nil
}

// Convert_batch_Deployment_To_v1_Deployment is an autogenerated conversion function.
func Convert_batch_Deployment_To_v1_Deployment(in *batch.Deployment, out *Deployment, s conversion.Scope) error {
	return autoConvert_batch_Deployment_To_v1_Deployment(in, out, s)
}

func autoConvert_v1_DeploymentPort_To_batch_DeploymentPort(in *DeploymentPort, out *batch.DeploymentPort, s conversion.Scope) error {
	out.Name = in.Name
	out.ContainerPort = in.ContainerPort
	return nil
}

// Convert_v1_DeploymentPort_To_batch_DeploymentPort is an autogenerated conversion function.
func Convert_v1_DeploymentPort_To_batch_DeploymentPort(in *DeploymentPort, out *batch.DeploymentPort, s conversion.Scope) error {
	return autoConvert_v1_DeploymentPort_To_batch_DeploymentPort(in, out, s)
}

func autoConvert_batch_DeploymentPort_To_v1_DeploymentPort(in *batch.DeploymentPort, out *DeploymentPort, s conversion.Scope) error {
	out.Name = in.Name
	out.ContainerPort = in.ContainerPort
	return nil
}

// Convert_batch_DeploymentPort_To_v1_DeploymentPort is an autogenerated conversion function.
func Convert_batch_DeploymentPort_To_v1_DeploymentPort(in *batch.DeploymentPort, out *DeploymentPort, s conversion.Scope) error {
	return autoConvert_batch_DeploymentPort_To_v1_DeploymentPort(in, out, s)
}

func autoConvert_v1_Service_To_batch_Service(in *Service, out *batch.Service, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	out.Selector = *(*map[string]string)(unsafe.Pointer(&in.Selector))
	out.Ports = *(*[]batch.ServicePort)(unsafe.Pointer(&in.Ports))
	return nil
}

// Convert_v1_Service_To_batch_Service is an autogenerated conversion function.
func Convert_v1_Service_To_batch_Service(in *Service, out *batch.Service, s conversion.Scope) error {
	return autoConvert_v1_Service_To_batch_Service(in, out, s)
}

func autoConvert_batch_Service_To_v1_Service(in *batch.Service, out *Service, s conversion.Scope) error {
	out.Name = in.Name
	out.Namespace = in.Namespace
	out.Selector = *(*map[string]string)(unsafe.Pointer(&in.Selector))
	out.Ports = *(*[]ServicePort)(unsafe.Pointer(&in.Ports))
	return nil
}

// Convert_batch_Service_To_v1_Service is an autogenerated conversion function.
func Convert_batch_Service_To_v1_Service(in *batch.Service, out *Service, s conversion.Scope) error {
	return autoConvert_batch_Service_To_v1_Service(in, out, s)
}

func autoConvert_v1_ServicePort_To_batch_ServicePort(in *ServicePort, out *batch.ServicePort, s conversion.Scope) error {
	out.Name = in.Name
	out.Port = in.Port
	out.TargetPort = in.TargetPort
	return nil
}

// Convert_v1_ServicePort_To_batch_ServicePort is an autogenerated conversion function.
func Convert_v1_ServicePort_To_batch_ServicePort(in *ServicePort, out *batch.ServicePort, s conversion.Scope) error {
	return autoConvert_v1_ServicePort_To_batch_ServicePort(in, out, s)
}

func autoConvert_batch_ServicePort_To_v1_ServicePort(in *batch.ServicePort, out *ServicePort, s conversion.Scope) error {
	out.Name = in.Name
	out.Port = in.Port
	out.TargetPort = in.TargetPort
	return nil
}

// Convert_batch_ServicePort_To_v1_ServicePort is an autogenerated conversion function.
func Convert_batch_ServicePort_To_v1_ServicePort(in *batch.ServicePort, out *ServicePort, s conversion.Scope) error {
	return autoConvert_batch_ServicePort_To_v1_ServicePort(in, out, s)
}

func autoConvert_v1_Variable_To_batch_Variable(in *Variable, out *batch.Variable, s conversion.Scope) error {
	out.Key = in.Key
	out.Value = in.Value
	return nil
}

// Convert_v1_Variable_To_batch_Variable is an autogenerated conversion function.
func Convert_v1_Variable_To_batch_Variable(in *Variable, out *batch.Variable, s conversion.Scope) error {
	return autoConvert_v1_Variable_To_batch_Variable(in, out, s)
}

func autoConvert_batch_Variable_To_v1_Variable(in *batch.Variable, out *Variable, s conversion.Scope) error {
	out.Key = in.Key
	out.Value = in.Value
	return nil
}

// Convert_batch_Variable_To_v1_Variable is an autogenerated conversion function.
func Convert_batch_Variable_To_v1_Variable(in *batch.Variable, out *Variable, s conversion.Scope) error {
	return autoConvert_batch_Variable_To_v1_Variable(in, out, s)
}
